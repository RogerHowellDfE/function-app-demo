name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/*.md'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: function-app-demo
  RETRIES: 20
  SLEEP_TIME: 10

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    permissions: 
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Verify app builds, and that tests pass
      run: |
        dotnet restore
        dotnet build   --configuration Release --no-restore
        dotnet test    --configuration Release --no-restore
        dotnet publish --configuration Release --no-restore --output ./publish

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: function-app-demo
        path: ./publish

  build_and_push_image:
    runs-on: ubuntu-latest
    needs: build_and_test

    permissions: 
      packages: write

    outputs:
      image: ${{ steps.build_image.outputs.image }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push docker image
      id: build_image
      uses: DFE-Digital/github-actions/build-docker-image@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy_to_dev:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build_and_push_image

    concurrency:
      group: deploy_to_dev
      cancel-in-progress: true

    environment: Development

    env:
      RESOURCE_GROUP: fa-docker-demo
      APP_NAME: fa-docker-demo-dev
      TEMP_KEY_NAME: temp-key-cicd-smoketest
      IMAGE: ${{ needs.build_and_push_image.outputs.image }}

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Debug - Print Image and Variables
      run: |
        echo "IMAGE      : ${{ env.IMAGE }}"
        echo "REGISTRY   : ${{ env.REGISTRY }}"
        echo "IMAGE_NAME : ${{ env.IMAGE_NAME }}"
        echo "GITHUB_REF : ${{ github.ref }}"
        echo "GITHUB_SHA : ${{ github.sha }}"

    - name: Deploy to Azure (Dev)
      id: fa
      uses: Azure/functions-container-action@v1
      with:
        app-name: '${{ env.APP_NAME }}'
        image: '${{ env.IMAGE }}'

    - name: Add Temporary API Key for Smoke Test
      id: add_temp_api_key
      run: |
        TEMP_API_KEY=$(az functionapp keys set --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} --query "value" -o tsv)
        echo "TEMP_API_KEY=${TEMP_API_KEY}" >> $GITHUB_ENV

    - name: Smoke Test - Verify HealthCheck
      shell: pwsh
      run: |
        sleep 30  # Wait for the deployment to complete
        $headers = @{ "x-functions-key" = "${{ env.TEMP_API_KEY }}" }
        $success = $false
        for ($i = 0; $i -lt ${{ env.RETRIES }}; $i++) {
          Write-Host "Request $($i + 1) of ${{ env.RETRIES }}"
          try {
            Invoke-RestMethod -Uri "${{ steps.fa.outputs.app-url }}/api/HealthCheck" -Headers $headers
            $success = $true
            break
          } catch {
            Write-Host "Request failed with status code $($_.Exception.Response.StatusCode)"
            Write-Host "Retrying in ${{ env.SLEEP_TIME }} seconds..."
            Start-Sleep -Seconds ${{ env.SLEEP_TIME }}
          }
        }
        if (-not $success) {
          Write-Error "HealthCheck failed after ${{ env.RETRIES }} attempts."
          exit 1
        }

    - name: Remove Temporary API Key
      if: always()
      run: |
        az functionapp keys delete --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} || echo "Key not found, skipping deletion"
  deploy_to_test:
    runs-on: ubuntu-latest
    needs: [build_and_push_image, deploy_to_dev]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    concurrency:
      group: deploy_to_test
      cancel-in-progress: true

    environment: Test

    env:
      RESOURCE_GROUP: fa-docker-demo
      APP_NAME: fa-docker-demo-test
      TEMP_KEY_NAME: temp-key-cicd-smoketest
      IMAGE: ${{ needs.build_and_push_image.outputs.image }}

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Debug - Print Image and Variables
      run: |
        echo "IMAGE      : ${{ env.IMAGE }}"
        echo "REGISTRY   : ${{ env.REGISTRY }}"
        echo "IMAGE_NAME : ${{ env.IMAGE_NAME }}"
        echo "GITHUB_REF : ${{ github.ref }}"
        echo "GITHUB_SHA : ${{ github.sha }}"

    - name: Deploy to Azure (Test)
      id: fa
      uses: Azure/functions-container-action@v1
      with:
        app-name: '${{ env.APP_NAME }}'
        image: '${{ env.IMAGE }}'

    - name: Add Temporary API Key for Smoke Test
      id: add_temp_api_key
      run: |
        TEMP_API_KEY=$(az functionapp keys set --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} --query "value" -o tsv)
        echo "TEMP_API_KEY=${TEMP_API_KEY}" >> $GITHUB_ENV

    - name: Smoke Test - Verify HealthCheck
      shell: pwsh
      run: |
        sleep 30  # Wait for the deployment to complete
        $headers = @{ "x-functions-key" = "${{ env.TEMP_API_KEY }}" }
        $success = $false
        for ($i = 0; $i -lt ${{ env.RETRIES }}; $i++) {
          Write-Host "Request $($i + 1) of ${{ env.RETRIES }}"
          try {
            Invoke-RestMethod -Uri "${{ steps.fa.outputs.app-url }}/api/HealthCheck" -Headers $headers
            $success = $true
            break
          } catch {
            Write-Host "Retrying in ${{ env.SLEEP_TIME }} seconds..."
            Start-Sleep -Seconds ${{ env.SLEEP_TIME }}
          }
        }
        if (-not $success) {
          Write-Error "HealthCheck failed after ${{ env.RETRIES }} attempts."
          exit 1
        }

    - name: Remove Temporary API Key
      if: always()
      run: |
        az functionapp keys delete --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} || echo "Key not found, skipping deletion"

  deploy_to_prod:
    runs-on: ubuntu-latest
    needs: [build_and_push_image, deploy_to_test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    concurrency:
      group: deploy_to_prod
      cancel-in-progress: true

    environment: Production

    env:
      RESOURCE_GROUP: fa-docker-demo
      APP_NAME: fa-docker-demo-prod
      TEMP_KEY_NAME: temp-key-cicd-smoketest
      IMAGE: ${{ needs.build_and_push_image.outputs.image }}

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Debug - Print Image and Variables
      run: |
        echo "IMAGE      : ${{ env.IMAGE }}"
        echo "REGISTRY   : ${{ env.REGISTRY }}"
        echo "IMAGE_NAME : ${{ env.IMAGE_NAME }}"
        echo "GITHUB_REF : ${{ github.ref }}"
        echo "GITHUB_SHA : ${{ github.sha }}"

    - name: Deploy to Azure (Prod)
      id: fa
      uses: Azure/functions-container-action@v1
      with:
        app-name: '${{ env.APP_NAME }}'
        image: '${{ env.IMAGE }}'

    - name: Add Temporary API Key for Smoke Test
      id: add_temp_api_key
      run: |
        TEMP_API_KEY=$(az functionapp keys set --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} --query "value" -o tsv)
        echo "TEMP_API_KEY=${TEMP_API_KEY}" >> $GITHUB_ENV

    - name: Smoke Test - Verify HealthCheck
      shell: pwsh
      run: |
        sleep 30  # Wait for the deployment to complete
        $headers = @{ "x-functions-key" = "${{ env.TEMP_API_KEY }}" }
        $success = $false
        for ($i = 0; $i -lt ${{ env.RETRIES }}; $i++) {
          Write-Host "Request $($i + 1) of ${{ env.RETRIES }}"
          try {
            Invoke-RestMethod -Uri "${{ steps.fa.outputs.app-url }}/api/HealthCheck" -Headers $headers
            $success = $true
            break
          } catch {
            Write-Host "Retrying in ${{ env.SLEEP_TIME }} seconds..."
            Start-Sleep -Seconds ${{ env.SLEEP_TIME }}
          }
        }
        if (-not $success) {
          Write-Error "HealthCheck failed after ${{ env.RETRIES }} attempts."
          exit 1
        }

    - name: Remove Temporary API Key
      if: always()
      run: |
        az functionapp keys delete --name ${{ env.APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --key-type functionKeys --key-name ${{ env.TEMP_KEY_NAME }} || echo "Key not found, skipping deletion"

